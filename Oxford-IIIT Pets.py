# -*- coding: utf-8 -*-
"""Pet_Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Cosjn5qf6YuTOCU7BdHiQ6M3jUauNY0
"""

! pip install kaggle

from google.colab import drive
drive.mount('/content/drive')

! mkdir ~/.kaggle

! cp /content/drive/MyDrive/Kaggle_API/kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download cielceline/oxfordiiitpetfromxijiatao

! unzip cielceline/oxfordiiitpetfromxijiatao

ls -l

! unzip the-oxfordiiit-pet-dataset.zip

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import os
import numpy as np

# Paths to the dataset
image_path = '/content/images'
annotations_path = '/content/annotations'

# Load the data
def load_data(image_dir, annotations_dir):
    images = []
    labels = []
    for filename in os.listdir(image_dir):
        if filename.endswith(".jpg"):
            image = tf.keras.preprocessing.image.load_img(os.path.join(image_dir, filename), target_size=(128, 128))
            image = tf.keras.preprocessing.image.img_to_array(image)
            images.append(image)
            # Extract the label from the filename
            label = filename.split('_')[0]
            labels.append(label)
    return np.array(images), np.array(labels)

images, labels = load_data(image_path, annotations_path)

from sklearn.preprocessing import LabelEncoder

# Encode labels to integers
label_encoder = LabelEncoder()
labels_encoded = label_encoder.fit_transform(labels)

# Split the data into training and validation sets
train_images, val_images, train_labels, val_labels = train_test_split(images, labels_encoded, test_size=0.2, random_state=42)

# Data augmentation
datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

train_generator = datagen.flow(train_images, train_labels, batch_size=32)
val_generator = datagen.flow(val_images, val_labels, batch_size=32)

"""**ANN Model**"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

ann_model = Sequential([
    Flatten(input_shape=(128, 128, 3)),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    Dense(37, activation='softmax')
])

ann_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

ann_model.fit(train_generator, epochs=2, validation_data=val_generator)
"""**CNN Model**"""

from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout

cnn_model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(64, activation='relu'),
    Dense(37, activation='softmax')
])

cnn_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

cnn_model.fit(train_generator, epochs=2, validation_data=val_generator)

ann_loss, ann_accuracy = ann_model.evaluate(val_generator)
cnn_loss, cnn_accuracy = cnn_model.evaluate(val_generator)

print(f"ANN Model - Loss: {ann_loss}, Accuracy: {ann_accuracy}")
print(f"CNN Model - Loss: {cnn_loss}, Accuracy: {cnn_accuracy}")

"""**Making Prediction**"""

def predict_image(model, img_path):
    img = tf.keras.preprocessing.image.load_img(img_path, target_size=(128, 128))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0) / 255.0
    prediction = model.predict(img_array)
    return np.argmax(prediction)

# Example prediction
image_path = '/content/images/Abyssinian_1.jpg'
ann_prediction = predict_image(ann_model, image_path)
cnn_prediction = predict_image(cnn_model, image_path)

print(f"ANN Model Prediction: {ann_prediction}")
print(f"CNN Model Prediction: {cnn_prediction}")